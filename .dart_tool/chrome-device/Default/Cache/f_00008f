define(['dart_sdk'], (function load__packages__collection__src__queue_list_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var queue_list = Object.create(dart.library);
  var $length = dartx.length;
  var $setRange = dartx.setRange;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/collection-1.15.0/lib/src/queue_list.dart",
    "package:collection/src/queue_list.dart"
  ];
  var _head$ = dart.privateName(queue_list, "QueueList._head");
  var _tail$ = dart.privateName(queue_list, "QueueList._tail");
  var _table$ = dart.privateName(queue_list, "_table");
  var _head = dart.privateName(queue_list, "_head");
  var _tail = dart.privateName(queue_list, "_tail");
  var _add = dart.privateName(queue_list, "_add");
  var _preGrow = dart.privateName(queue_list, "_preGrow");
  var _grow = dart.privateName(queue_list, "_grow");
  var _writeToList = dart.privateName(queue_list, "_writeToList");
  const _is_QueueList_default = Symbol('_is_QueueList_default');
  queue_list.QueueList$ = dart.generic(E => {
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    var ListOfEN = () => (ListOfEN = dart.constFn(core.List$(EN())))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class QueueList extends Object_ListMixin$36 {
      get [_head]() {
        return this[_head$];
      }
      set [_head](value) {
        this[_head$] = value;
      }
      get [_tail]() {
        return this[_tail$];
      }
      set [_tail](value) {
        this[_tail$] = value;
      }
      static _castFrom(S, T, source) {
        return new (queue_list._CastQueueList$(S, T)).new(source);
      }
      static from(source) {
        let t0;
        if (core.List.is(source)) {
          let length = source[$length];
          let queue = new (queue_list.QueueList$(E)).new(length + 1);
          if (!(queue[_table$][$length] > length)) dart.assertFailed(null, I[0], 56, 14, "queue._table.length > length");
          let sourceList = source;
          queue[_table$][$setRange](0, length, sourceList, 0);
          queue[_tail] = length;
          return queue;
        } else {
          t0 = new (queue_list.QueueList$(E)).new();
          return (() => {
            t0.addAll(source);
            return t0;
          })();
        }
      }
      static _computeInitialCapacity(initialCapacity) {
        if (initialCapacity == null || dart.notNull(initialCapacity) < 8) {
          return 8;
        }
        initialCapacity = dart.notNull(initialCapacity) + 1;
        if (queue_list.QueueList._isPowerOf2(initialCapacity)) {
          return initialCapacity;
        }
        return queue_list.QueueList._nextPowerOf2(initialCapacity);
      }
      add(element) {
        E.as(element);
        this[_add](element);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (core.List.is(iterable)) {
          let list = iterable;
          let addCount = list[$length];
          let length = this.length;
          if (length + addCount >= this[_table$][$length]) {
            this[_preGrow](length + addCount);
            this[_table$][$setRange](length, length + addCount, list, 0);
            this[_tail] = this[_tail] + addCount;
          } else {
            let endSpace = this[_table$][$length] - this[_tail];
            if (addCount < endSpace) {
              this[_table$][$setRange](this[_tail], this[_tail] + addCount, list, 0);
              this[_tail] = this[_tail] + addCount;
            } else {
              let preSpace = addCount - endSpace;
              this[_table$][$setRange](this[_tail], this[_tail] + endSpace, list, 0);
              this[_table$][$setRange](0, preSpace, list, endSpace);
              this[_tail] = preSpace;
            }
          }
        } else {
          for (let element of iterable) {
            this[_add](element);
          }
        }
      }
      cast(T) {
        return queue_list.QueueList._castFrom(E, T, this);
      }
      retype(T) {
        return this.cast(T);
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
      addLast(element) {
        E.as(element);
        this[_add](element);
      }
      addFirst(element) {
        E.as(element);
        this[_head] = (this[_head] - 1 & this[_table$][$length] - 1) >>> 0;
        this[_table$][$_set](this[_head], element);
        if (this[_head] === this[_tail]) this[_grow]();
      }
      removeFirst() {
        if (this[_head] === this[_tail]) dart.throw(new core.StateError.new("No element"));
        let result = E.as(this[_table$][$_get](this[_head]));
        this[_table$][$_set](this[_head], null);
        this[_head] = (this[_head] + 1 & this[_table$][$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head] === this[_tail]) dart.throw(new core.StateError.new("No element"));
        this[_tail] = (this[_tail] - 1 & this[_table$][$length] - 1) >>> 0;
        let result = E.as(this[_table$][$_get](this[_tail]));
        this[_table$][$_set](this[_tail], null);
        return result;
      }
      get length() {
        return (this[_tail] - this[_head] & this[_table$][$length] - 1) >>> 0;
      }
      set length(value) {
        if (value < 0) dart.throw(new core.RangeError.new("Length " + dart.str(value) + " may not be negative."));
        if (value > this.length && !E.is(null)) {
          dart.throw(new core.UnsupportedError.new("The length can only be increased when the element type is " + "nullable, but the current element type is `" + dart.str(dart.wrapType(E)) + "`."));
        }
        let delta = value - this.length;
        if (delta >= 0) {
          if (this[_table$][$length] <= value) {
            this[_preGrow](value);
          }
          this[_tail] = (this[_tail] + delta & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let newTail = this[_tail] + delta;
        if (newTail >= 0) {
          this[_table$][$fillRange](newTail, this[_tail], null);
        } else {
          newTail = newTail + this[_table$][$length];
          this[_table$][$fillRange](0, this[_tail], null);
          this[_table$][$fillRange](newTail, this[_table$][$length], null);
        }
        this[_tail] = newTail;
      }
      _get(index) {
        if (index < 0 || index >= this.length) {
          dart.throw(new core.RangeError.new("Index " + dart.str(index) + " must be in the range [0.." + dart.str(this.length) + ")."));
        }
        return E.as(this[_table$][$_get]((this[_head] + index & this[_table$][$length] - 1) >>> 0));
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index < 0 || index >= this.length) {
          dart.throw(new core.RangeError.new("Index " + dart.str(index) + " must be in the range [0.." + dart.str(this.length) + ")."));
        }
        this[_table$][$_set]((this[_head] + index & this[_table$][$length] - 1) >>> 0, value);
        return value$;
      }
      static _isPowerOf2(number) {
        return (number & number - 1) === 0;
      }
      static _nextPowerOf2(number) {
        if (!(number > 0)) dart.assertFailed(null, I[0], 221, 12, "number > 0");
        number = (number << 1 >>> 0) - 1;
        for (;;) {
          let nextNumber = (number & number - 1) >>> 0;
          if (nextNumber === 0) return number;
          number = nextNumber;
        }
      }
      [_add](element) {
        this[_table$][$_set](this[_tail], element);
        this[_tail] = (this[_tail] + 1 & this[_table$][$length] - 1) >>> 0;
        if (this[_head] === this[_tail]) this[_grow]();
      }
      [_grow]() {
        let newTable = ListOfEN().filled(this[_table$][$length] * 2, null);
        let split = this[_table$][$length] - this[_head];
        newTable[$setRange](0, split, this[_table$], this[_head]);
        newTable[$setRange](split, split + this[_head], this[_table$], 0);
        this[_head] = 0;
        this[_tail] = this[_table$][$length];
        this[_table$] = newTable;
      }
      [_writeToList](target) {
        if (!(target[$length] >= this.length)) dart.assertFailed(null, I[0], 249, 12, "target.length >= length");
        if (this[_head] <= this[_tail]) {
          let length = this[_tail] - this[_head];
          target[$setRange](0, length, this[_table$], this[_head]);
          return length;
        } else {
          let firstPartSize = this[_table$][$length] - this[_head];
          target[$setRange](0, firstPartSize, this[_table$], this[_head]);
          target[$setRange](firstPartSize, firstPartSize + this[_tail], this[_table$], 0);
          return this[_tail] + firstPartSize;
        }
      }
      [_preGrow](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[0], 264, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[$rightShift](1);
        let newCapacity = queue_list.QueueList._nextPowerOf2(newElementCount);
        let newTable = ListOfEN().filled(newCapacity, null);
        this[_tail] = this[_writeToList](newTable);
        this[_table$] = newTable;
        this[_head] = 0;
      }
    }
    (QueueList.new = function(initialCapacity = null) {
      QueueList._init.call(this, queue_list.QueueList._computeInitialCapacity(initialCapacity));
    }).prototype = QueueList.prototype;
    (QueueList._init = function(initialCapacity) {
      if (!queue_list.QueueList._isPowerOf2(initialCapacity)) dart.assertFailed(null, I[0], 43, 16, "_isPowerOf2(initialCapacity)");
      this[_table$] = ListOfEN().filled(initialCapacity, null);
      this[_head$] = 0;
      this[_tail$] = 0;
      ;
    }).prototype = QueueList.prototype;
    (QueueList.__ = function(_head, _tail, _table) {
      this[_head$] = _head;
      this[_tail$] = _tail;
      this[_table$] = _table;
      ;
    }).prototype = QueueList.prototype;
    dart.addTypeTests(QueueList);
    QueueList.prototype[_is_QueueList_default] = true;
    dart.addTypeCaches(QueueList);
    QueueList[dart.implements] = () => [collection.Queue$(E)];
    dart.setMethodSignature(QueueList, () => ({
      __proto__: dart.getMethods(QueueList.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [_add]: dart.fnType(dart.void, [E]),
      [_grow]: dart.fnType(dart.void, []),
      [_writeToList]: dart.fnType(core.int, [core.List$(dart.nullable(E))]),
      [_preGrow]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(QueueList, () => ({
      __proto__: dart.getGetters(QueueList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(QueueList, () => ({
      __proto__: dart.getSetters(QueueList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(QueueList, I[1]);
    dart.setFieldSignature(QueueList, () => ({
      __proto__: dart.getFields(QueueList.__proto__),
      [_table$]: dart.fieldType(core.List$(dart.nullable(E))),
      [_head]: dart.fieldType(core.int),
      [_tail]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(QueueList, [
      'add',
      'addAll',
      'cast',
      'toString',
      'removeLast',
      '_get',
      '_set'
    ]);
    dart.defineExtensionAccessors(QueueList, ['length']);
    return QueueList;
  });
  queue_list.QueueList = queue_list.QueueList$();
  dart.defineLazy(queue_list.QueueList, {
    /*queue_list.QueueList._initialCapacity*/get _initialCapacity() {
      return 8;
    }
  }, false);
  dart.addTypeTests(queue_list.QueueList, _is_QueueList_default);
  var _delegate$ = dart.privateName(queue_list, "_delegate");
  const _is__CastQueueList_default = Symbol('_is__CastQueueList_default');
  queue_list._CastQueueList$ = dart.generic((S, T) => {
    class _CastQueueList extends queue_list.QueueList$(T) {
      get [_head]() {
        return this[_delegate$][_head];
      }
      set [_head](value) {
        return this[_delegate$][_head] = value;
      }
      get [_tail]() {
        return this[_delegate$][_tail];
      }
      set [_tail](value) {
        return this[_delegate$][_tail] = value;
      }
    }
    (_CastQueueList.new = function(_delegate) {
      this[_delegate$] = _delegate;
      _CastQueueList.__proto__.__.call(this, -1, -1, _delegate[_table$][$cast](T));
      ;
    }).prototype = _CastQueueList.prototype;
    dart.addTypeTests(_CastQueueList);
    _CastQueueList.prototype[_is__CastQueueList_default] = true;
    dart.addTypeCaches(_CastQueueList);
    dart.setGetterSignature(_CastQueueList, () => ({
      __proto__: dart.getGetters(_CastQueueList.__proto__),
      [_head]: core.int,
      [_tail]: core.int
    }));
    dart.setSetterSignature(_CastQueueList, () => ({
      __proto__: dart.getSetters(_CastQueueList.__proto__),
      [_head]: core.int,
      [_tail]: core.int
    }));
    dart.setLibraryUri(_CastQueueList, I[1]);
    dart.setFieldSignature(_CastQueueList, () => ({
      __proto__: dart.getFields(_CastQueueList.__proto__),
      [_delegate$]: dart.finalFieldType(queue_list.QueueList$(S))
    }));
    return _CastQueueList;
  });
  queue_list._CastQueueList = queue_list._CastQueueList$();
  dart.addTypeTests(queue_list._CastQueueList, _is__CastQueueList_default);
  dart.trackLibraries("packages/collection/src/queue_list.dart", {
    "package:collection/src/queue_list.dart": queue_list
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["queue_list.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/collection/src/queue_list.dart.lib.js"}');
  // Exports:
  return {
    src__queue_list: queue_list
  };
}));

//# sourceMappingURL=queue_list.dart.lib.js.map
